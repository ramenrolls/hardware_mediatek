/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.camera.security@1.0;

import ISecureCameraClientCallback;
import android.hardware.camera.common@1.0::types;

/**
 * This is tailored for secure camera control.
 */
interface ISecureCamera {
    /**
     * query available secure camera device in string literal.
     *
     * @param cameraDeviceIDs
     * @return cameraDeviceIDs
     *      The vector of available secure camera device IDs.
     */
    getCameraIdList()
            generates (Status status, vec<string> cameraDeviceIDs);

    /**
     *  Query Camera Secure Mode
     *
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         Camera status is not secure mode
     *      CAMERA_IN_USE:
     *         Camera status is secure mode
     * @return secureDeviceInUsedIDs
     *      The vector of in used secure camera device IDs.
     */
    getSecureStatus()
            generates (Status status, vec<string> secureDeviceInUsedIDs);

    /**
     * Open secure camera device(s).
     *
     * @param ids
     *      valid camera id(s) from getCameraIdList(); the order of
     *      opening camera devices is defined in
     *      the HAL server implementation implicitly.
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
    open(vec<string> ids) generates (Status status);

    /**
     * Close secure camera device(s).
     *
     * @param ids
     *      opened camera id(s)
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
    close(vec<string> ids) generates (Status status);

    /**
     * Initialize secure camera device(s) (valid after a successful open()).
     *
     * @param ids
     *      opened camera id(s)
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
    initialize(vec<string> ids) generates (Status status);

    /**
     * Uninitialize secure camera device(s) (valid after a successful open()).
     *
     * @param ids
     *      opened camera id(s)
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
    uninitialize(vec<string> ids) generates (Status status);

    /**
     * Register a callback to receive the capture result(s)
     *
     * @param clientCallback
     *      callback implementation from the HAL client
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
     registerCallback(ISecureCameraClientCallback clientCallback)
         generates (Status status);

    /**
     * Start capture biometric data
     *
     * @param ids
     *      opened camera id(s)
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
     startCapture(vec<string> ids) generates (Status status);

    /**
     * Stop capture biometric data
     *
     * @param ids
     *      opened camera id(s)
     * @return status
     *      Status code for the operation, one of:
     *      OK:
     *         On success
     */
     stopCapture(vec<string> ids) generates (Status status);
};
